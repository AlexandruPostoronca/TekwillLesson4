type: edu
custom_name: Print strings in the reverse order
files:
  - name: src/Main.java
    visible: true
    text: |-
      import java.util.Scanner;
      
      class Main {
          public static void main(String[] args) {
              Scanner scanner = new Scanner(System.in);
              // start coding here
          }
      }
    learner_created: false
  - name: test/MainTest.java
    visible: false
    text: |-
      import org.junit.After;
      import org.junit.Before;
      import org.junit.Test;
      
      import java.io.ByteArrayInputStream;
      import java.io.ByteArrayOutputStream;
      import java.io.PrintStream;
      
      import static org.junit.Assert.assertTrue;
      import static junit.framework.TestCase.assertFalse;
      
      public class MainTest {
          private final PrintStream standardOut = System.out;
          private final ByteArrayOutputStream outputStreamCaptor = new ByteArrayOutputStream();
      
          @Before
          public void setUp() {
              System.setOut(new PrintStream(outputStreamCaptor));
          }
      
          @After
          public void tearDown() {
              System.setOut(standardOut);
          }
      
          @Test
          public void test1() {
              simpleTest("Java", "Programming", "Language");
          }
      
          @Test
          public void test2() {
              simpleTest("one", "two", "three");
          }
      
          @Test
          public void test3() {
              simpleTest("ala", "bala", "portocala");
          }
      
          private void simpleTest(String word1, String word2, String word3) {
              String input = word1 + "\n" + word2 + "\n " + word3 + "\n";
              System.setIn(new ByteArrayInputStream(input.getBytes()));
      
              Main.main(new String[]{});
      
              String result = outputStreamCaptor.toString().trim();
              assertFalse("The output must not be empty.", result.isEmpty());
      
              String expectedOutput = word3 + "\r\n" + word2 + "\r\n " + word1 + "\r\n";
              String errorMessage = "The output must be:" + expectedOutput + "\r\nActual output:\r\n" + result;
              String expectedRegex = word3 + "(\\r\\n|\\r|\\n)" + word2 + "(\\r\\n|\\r|\\n)" + word1 + "($|\\r\\n|\\r|\\n)";
              assertTrue(errorMessage, result.matches(expectedRegex));
          }
      }
    learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: "Wed, 06 Mar 2024 16:51:42 UTC"
record: -1
